Program ::= Statement*

Statement ::= Output 
          | IfStatement
          | CaseStatement
          | LoopStatement
          | ReturnStatement
          | ExitStatement
          | FunctionDecl
          | InputStatement
          | Declaration ";"
          | Assignment Expression ";"
          | FunctionCall
          | Expression ";"

Output ::= "out" "(" Expression ")" ";"

IfStatement ::= "if" Expression "," BlockStatement [ElseClause]
ElseClause ::= "else" "," BlockStatement
BlockStatement ::= "{" Program "}"

CaseStatement ::= "case" Expression "," BlockStatement [ElseCaseClause]
ElseCaseClause ::= "elsecase" "," BlockStatement

LoopStatement ::= "loop" Expression "," BlockStatement

ReturnStatement ::= "return" Expression ";"

ExitStatement ::= "exit" "(" NAT ")" ";"

FunctionDecl ::= "Function" WORD "<-" "(" [ParameterList] ")" "{" Program "}"
ParameterList ::= Declaration | Declaration "," ParameterList

InputStatement ::= (Assignment | WORD "<-") "in" "(" ")" ";"

Assignment ::= (Declaration | WORD) "<-"

Declaration ::= DTYPE WORD

FunctionCall ::= WORD "(" [ArgumentList] ")" ";"
ArgumentList ::= Expression | Expression "," ArgumentList

Expression ::= LogOrExpr

LogOrExpr ::= LogAndExpr ("or" LogAndExpr)*

LogAndExpr ::= BitOrExpr ("and" BitOrExpr)*

BitOrExpr ::= BitAndExpr ("?" BitAndExpr)*

BitAndExpr ::= EqualityExpr ("&" EqualityExpr)*

EqualityExpr ::= IneqExpr (("=" | "!=") IneqExpr)*

IneqExpr ::= AddExpr ((">" | ">=" | "<" | "<=") AddExpr)*

AddExpr ::= MultExpr (("+"|"-"|"@") MultExpr)*

MultExpr ::= PowerExpr (("*"|"/"|"%") PowerExpr)*

PowerExpr ::= NotExpr ("^" NotExpr)*

NotExpr ::= ("!"|"not")* PrimaryExpr

PrimaryExpr ::= "(" Expression ")"
             | NAT
             | NINT
             | PREAL
             | NREAL
             | WORD
             | STR