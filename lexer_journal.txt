LEXER

The lexer tokenizes a JizzLang program. The JizzLang programming language recognizes 14 types of tokens:
	- WORD (identifiers for variables and functions);
	- STR (strings);
	- NAT (unsigned non-floating point numbers);
	- NINT (negative non-floating point numbers);
	- PREAL (unsigned floating point numbers);
	- NREAL (negative floating point numbers);
	- CFLOW (keywords associated with a program's control flow, such as if statements and loops);
	- IO (keywords for input and output operations);
	- DTYPE (data type annotations);
	- PAR (parentheses);
	- CMD (tokens that concatenate or interrupt commands);
	- ASSN (assignment operator; this token has only one possible value, the assignment operator itself);
	- CMP (comparison operators);
	- OP (mathematical and logical operators);
	- BOP (bitwise operators);
The lexer iterates through each character in the input source code and recognizes tokens.

Tokens can be divided into three groups based on the way the lexer recognizes them:
	GROUP 1:
		This first "group" actually contains only one token type, which is STR; strings in JizzLang always start and end with backticks (`) and they can contain any ASCII character; because of this, one may also write whitespaces and JizzLang keywords inside a string; therefore, in order to avoid conflicts, string recognition has its own separate flow in the lexing algorithm: if an opening backtick is detected, all the characters are buffered until another backtick is found and the whole buffered sequence is stored as the value of a STR token.
	GROUP 2:
		This group contains the symbols and keywords of JizzLang; they are predetermined and standalone words that can be immediately recognized by the lexer with just a simple comparison with the set of keywords of the programming language; the tokens that belong to this group are CFLOW, IO, DTYPE, PAR, CMD, ASSN, CMP, OP and BOP.
	GROUP 3:
		Here we have the more complex tokens; these token types can appear in infinite different shapes, so a simple comparison with a finite dataset is not enough to recognize them. To recognize these token, the lexer uses non-deterministic finite automata, one for each token type belonging to this group: WORD, NAT, NINT, PREAL, NREAL.

Generally speaking, the lexer determines when to start and stop analyzing a candidate token based on whitespaces in the program source code, but there is a set of tokens, which we call "concatenable tokens", that are allowed to be written next to each other: parentheses, commas and semicolons. These tokens and the tokens adjacent to them will be recognized even without spaces, to allow the programmer to type a little bit more freely, i.e. to not have to write code like:

	Function ( Int arg1 , Int arg2 , Bool arg3 ) {
		if arg3 , out ( arg1 ) , return arg1 ;
		else , out ( arg2 ) ;
		return arg2 ;
	}

but instead write it like follows:

	Function(Int arg1, Int arg2, Bool arg3) {
		if arg3, out(arg1), return arg2;
		else, out(arg2);
		return arg2;
	}

In other programming languages like C, operators and assignments could be seen as "concatenable tokens" based on the definition we provided earlier, because of the following valid syntax:

	// example in C
	int x=1;
	int y=2;
	int z=x+y;
	int w=x&y;

However, such style is not supported in JizzLang. Operators of any type must spaced out between expressions and identifiers. The code in the previous example, if translated into JizzLang, would have to look like this:

	Int x <- 1;
	Int y <- 2;
	Int z <- x + y;
	Int w <- x & y;

Semicolons mark the end of commands; once a semicolon is detected, the lexer skips to the next line of code and keeps on reading the program from there; therefore, all of the text that follows a semicolon in the same line of the semicolon itself, is considered a comment. Using semicolons is the only way to write comments in JizzLang. There is no proper multi-line comment syntax in this language, so to write multiple lines of comment you have to use multiple semicolons:

	; This is an example
	; of a pseudo-multi-line comment
	; in the JizzLang programming language

	Int val1 <- 1;this is a comment
	Int val2 <- 2 ;this is another comment
	Int val3 <- 3; this is yet another comment
	Int val4 <- 4 ; one last comment